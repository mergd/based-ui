{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:ui",
  "dependencies": [
    "embla-carousel",
    "embla-carousel-react"
  ],
  "registryDependencies": [
    "https://ui.fldr.zip/r/button.json"
  ],
  "files": [
    {
      "path": "src/components/ui/carousel.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { EmblaOptionsType, EmblaPluginType } from \"embla-carousel\"\nimport useEmblaCarousel, {\n\tEmblaViewportRefType,\n\tUseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype CarouselRef = EmblaViewportRefType\ntype CarouselApi = UseEmblaCarouselType[1]\ntype CarouselOptions = EmblaOptionsType\ntype CarouselPlugins = EmblaPluginType[]\ntype CarouselOrientation = \"horizontal\" | \"vertical\"\n\ntype CarouselContextType = {\n\tcarouselRef: CarouselRef\n\tcarouselApi: CarouselApi\n\torientation: CarouselOrientation\n\tscrollNext: () => void\n\tscrollPrev: () => void\n\tcanScrollNext: boolean\n\tcanScrollPrev: boolean\n}\n\nconst CarouselContext = React.createContext<CarouselContextType | null>(null)\n\nconst useCarousel = () => {\n\tconst context = React.useContext(CarouselContext)\n\n\tif (!context) {\n\t\tthrow new Error(\"useCarousel must be used within a CarouselProvider\")\n\t}\n\n\treturn context\n}\n\ninterface CarouselProps extends React.HTMLAttributes<HTMLDivElement> {\n\toptions?: Omit<CarouselOptions, \"axis\">\n\tplugins?: CarouselPlugins\n\torientation?: CarouselOrientation\n\tsetApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = React.forwardRef<HTMLDivElement, CarouselProps>(\n\t(\n\t\t{\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\toptions,\n\t\t\tplugins,\n\t\t\torientation = \"horizontal\",\n\t\t\tsetApi,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\tconst [carouselRef, carouselApi] = useEmblaCarousel(\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t\taxis: orientation === \"horizontal\" ? \"x\" : \"y\",\n\t\t\t},\n\t\t\tplugins\n\t\t)\n\t\tconst [canScrollNext, setCanScrollNext] = React.useState(false)\n\t\tconst [canScrollPrev, setCanScrollPrev] = React.useState(false)\n\n\t\tReact.useEffect(() => {\n\t\t\tif (setApi) {\n\t\t\t\tsetApi(carouselApi)\n\t\t\t}\n\t\t}, [carouselApi, setApi])\n\n\t\tReact.useEffect(() => {\n\t\t\tif (!carouselApi) return\n\n\t\t\tsetCanScrollNext(carouselApi.canScrollNext())\n\t\t\tsetCanScrollPrev(carouselApi.canScrollPrev())\n\t\t}, [carouselApi])\n\n\t\tconst scrollNext = React.useCallback(() => {\n\t\t\tcarouselApi?.scrollNext()\n\t\t}, [carouselApi])\n\n\t\tconst scrollPrev = React.useCallback(() => {\n\t\t\tcarouselApi?.scrollPrev()\n\t\t}, [carouselApi])\n\n\t\tReact.useEffect(() => {\n\t\t\tif (!carouselApi) return\n\n\t\t\tconst canScrollSetter = () => {\n\t\t\t\tsetCanScrollNext(carouselApi.canScrollNext())\n\t\t\t\tsetCanScrollPrev(carouselApi.canScrollPrev())\n\t\t\t}\n\n\t\t\tcarouselApi.on(\"select\", canScrollSetter)\n\t\t\tcarouselApi.on(\"reInit\", canScrollSetter)\n\n\t\t\treturn () => {\n\t\t\t\tcarouselApi.off(\"select\", canScrollSetter)\n\t\t\t\tcarouselApi.off(\"reInit\", canScrollSetter)\n\t\t\t}\n\t\t}, [carouselApi])\n\n\t\treturn (\n\t\t\t<CarouselContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tcarouselRef,\n\t\t\t\t\tcarouselApi,\n\t\t\t\t\torientation,\n\t\t\t\t\tscrollNext,\n\t\t\t\t\tscrollPrev,\n\t\t\t\t\tcanScrollNext,\n\t\t\t\t\tcanScrollPrev,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div ref={ref} className={cn(\"relative w-full\", className)} {...props}>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</CarouselContext.Provider>\n\t\t)\n\t}\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => {\n\tconst { carouselRef, orientation } = useCarousel()\n\n\treturn (\n\t\t<div ref={carouselRef} className=\"overflow-hidden\">\n\t\t\t<div\n\t\t\t\tref={ref}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"flex\",\n\t\t\t\t\torientation === \"vertical\" && \"flex-col\",\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t)\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n\tconst { orientation } = useCarousel()\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\trole=\"group\"\n\t\t\taria-roledescription=\"slide\"\n\t\t\tclassName={cn(\n\t\t\t\t\"shrink-0 grow-0\tbasis-full\",\n\t\t\t\torientation === \"vertical\" ? \"py-2\" : \"px-2\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t)\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselNavigation = React.forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n\tconst { orientation } = useCarousel()\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\tclassName={cn(\n\t\t\t\t\"flex\",\n\t\t\t\torientation === \"horizontal\"\n\t\t\t\t\t? \"mr-2 mt-2 items-center justify-end space-x-2\"\n\t\t\t\t\t: \"absolute -right-10 bottom-0 flex-col space-y-2\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t)\n})\nCarouselNavigation.displayName = \"CarouselNavigation\"\n\nconst CarouselNext = React.forwardRef<\n\tReact.ElementRef<typeof Button>,\n\tReact.ComponentPropsWithoutRef<typeof Button>\n>(({ className, ...props }, ref) => {\n\tconst { scrollNext, canScrollNext, orientation } = useCarousel()\n\n\treturn (\n\t\t<Button\n\t\t\tref={ref}\n\t\t\tvariant=\"ghost\"\n\t\t\tsize=\"icon-sm\"\n\t\t\tonClick={scrollNext}\n\t\t\tdisabled={!canScrollNext}\n\t\t\tclassName={cn(\n\t\t\t\t\"[&>svg]:size-5\",\n\t\t\t\torientation === \"vertical\" ? \"rotate-90\" : \"\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t>\n\t\t\t<ChevronRight />\n\t\t</Button>\n\t)\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nconst CarouselPrevious = React.forwardRef<\n\tReact.ElementRef<typeof Button>,\n\tReact.ComponentPropsWithoutRef<typeof Button>\n>(({ className, ...props }, ref) => {\n\tconst { scrollPrev, canScrollPrev, orientation } = useCarousel()\n\n\treturn (\n\t\t<Button\n\t\t\tref={ref}\n\t\t\tvariant=\"ghost\"\n\t\t\tsize=\"icon-sm\"\n\t\t\tonClick={scrollPrev}\n\t\t\tdisabled={!canScrollPrev}\n\t\t\tclassName={cn(\n\t\t\t\t\"[&>svg]:size-5\",\n\t\t\t\torientation === \"vertical\" ? \"rotate-90\" : \"\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t>\n\t\t\t<ChevronLeft />\n\t\t</Button>\n\t)\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nexport {\n\tCarousel,\n\tCarouselContent,\n\tCarouselItem,\n\tCarouselNavigation,\n\tCarouselNext,\n\tCarouselPrevious,\n}\n\nexport type { CarouselApi }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}