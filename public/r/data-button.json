{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-button",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://ui.fldr.zip/r/button.json"
  ],
  "files": [
    {
      "path": "src/components/ui/data-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useCallback, useLayoutEffect, useRef, useState } from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport { Check, Loader2 } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Button, ButtonProps } from \"./button\" // Import original Button\n\nexport interface DataButtonProps extends ButtonProps {\n\tisLoading?: boolean\n\tisSuccess?: boolean\n\tloadingText?: string\n\tsuccessText?: string\n}\n\nconst DataButton = React.forwardRef<HTMLButtonElement, DataButtonProps>(\n\t(\n\t\t{\n\t\t\tchildren,\n\t\t\tisLoading,\n\t\t\tisSuccess,\n\t\t\tdisabled,\n\t\t\tclassName,\n\t\t\tstyle,\n\t\t\tvariant,\n\t\t\tloadingText = \"Loading...\",\n\t\t\tsuccessText = \"Success\",\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\t// const internalDisabled = isLoading || disabled || isSuccess // Keep for internal logic if needed elsewhere -> No longer needed\n\t\tconst buttonDisabled = disabled // Determine actual disabled state for the base Button\n\n\t\t// Explicitly type useRef to ensure it's mutable\n\t\tconst internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\t\tconst [dimensions, setDimensions] = useState<{\n\t\t\twidth: number | null\n\t\t\theight: number | null\n\t\t}>({ width: null, height: null })\n\n\t\t// Combine the forwarded ref and the internal ref\n\t\tconst setRefs = useCallback(\n\t\t\t(node: HTMLButtonElement | null) => {\n\t\t\t\t// Set our internal ref\n\t\t\t\tinternalButtonRef.current = node\n\t\t\t\t// Handle the forwarded ref\n\t\t\t\tif (typeof ref === \"function\") {\n\t\t\t\t\tref(node)\n\t\t\t\t} else if (ref) {\n\t\t\t\t\tref.current = node\n\t\t\t\t}\n\t\t\t},\n\t\t\t[ref]\n\t\t)\n\n\t\t// Measure the button on initial render to set fixed dimensions\n\t\tuseLayoutEffect(() => {\n\t\t\tif (\n\t\t\t\tinternalButtonRef.current &&\n\t\t\t\tdimensions.width === null &&\n\t\t\t\tdimensions.height === null\n\t\t\t) {\n\t\t\t\t// Use getBoundingClientRect for potentially more accurate dimensions\n\t\t\t\tconst rect = internalButtonRef.current.getBoundingClientRect()\n\t\t\t\tsetDimensions({ width: rect.width, height: rect.height })\n\t\t\t}\n\t\t\t// Only run once after initial render with children\n\t\t}, [children, dimensions.width, dimensions.height]) // Re-run if children change before initial measurement\n\n\t\tconst motionVariants = {\n\t\t\tinitial: { y: \"100%\", opacity: 0 },\n\t\t\tanimate: { y: 0, opacity: 1 },\n\t\t\texit: { y: \"-100%\", opacity: 0 },\n\t\t}\n\n\t\tconst motionProps = {\n\t\t\tinitial: \"initial\",\n\t\t\tanimate: \"animate\",\n\t\t\texit: \"exit\",\n\t\t\tvariants: motionVariants,\n\t\t\ttransition: { type: \"spring\", duration: 0.3, bounce: 0 },\n\t\t\tclassName: \"absolute inset-0 flex items-center justify-center\", // Keep content centered absolutely\n\t\t}\n\n\t\t// Base classes - rely on base button's flex for initial layout, state will fix size later\n\t\tconst buttonClassName = cn(\n\t\t\t\"relative overflow-hidden\", // Needed for absolute positioning of motion divs\n\t\t\tclassName\n\t\t)\n\n\t\t// Determine the variant, applying success variant if isSuccess is true\n\t\tconst currentVariant = isSuccess ? \"success\" : variant\n\n\t\t// Apply fixed dimensions once measured\n\t\tconst buttonStyle = {\n\t\t\t...style, // Preserve original styles\n\t\t\t...(dimensions.width !== null && { minWidth: dimensions.width }),\n\t\t\t...(dimensions.height !== null && { minHeight: dimensions.height }),\n\t\t}\n\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tref={setRefs} // Use the combined ref setter\n\t\t\t\tdisabled={buttonDisabled}\n\t\t\t\tvariant={currentVariant}\n\t\t\t\tclassName={buttonClassName}\n\t\t\t\tstyle={buttonStyle} // Apply dynamic styles for fixed dimensions\n\t\t\t\taria-live=\"polite\"\n\t\t\t\taria-busy={isLoading}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{/* Render children normally initially for measurement. Content will be replaced by absolute positioned elements later */}\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"inline-flex items-center justify-center\"\n\t\t\t\t\tstyle={{ opacity: dimensions.width === null ? 1 : 0 }}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</span>\n\n\t\t\t\t{/* Animated content - only visible when dimensions are set */}\n\t\t\t\t{dimensions.width !== null && (\n\t\t\t\t\t<AnimatePresence mode=\"popLayout\" initial={false}>\n\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t<motion.div key=\"loading\" {...motionProps}>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between items-center w-full px-3\">\n\t\t\t\t\t\t\t\t\t<span>{loadingText}</span>\n\t\t\t\t\t\t\t\t\t<Loader2 className=\"size-4 animate-spin\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t) : isSuccess ? (\n\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\tkey=\"success\"\n\t\t\t\t\t\t\t\t{...motionProps}\n\t\t\t\t\t\t\t\tclassName=\"absolute inset-0 flex justify-between items-center w-full px-3\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span>{successText}</span>\n\t\t\t\t\t\t\t\t<Check className=\"size-4\" />\n\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\tkey=\"children\"\n\t\t\t\t\t\t\t\t// Animate children in/out like other states\n\t\t\t\t\t\t\t\tinitial={{ opacity: 0 }} // Start transparent\n\t\t\t\t\t\t\t\tanimate={{ opacity: 1 }} // Fade in\n\t\t\t\t\t\t\t\texit={{ opacity: 0 }} // Fade out\n\t\t\t\t\t\t\t\ttransition={{ duration: 0.2 }} // Faster fade\n\t\t\t\t\t\t\t\tclassName=\"absolute inset-0 flex items-center justify-center\" // Use absolute positioning\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</AnimatePresence>\n\t\t\t\t)}\n\t\t\t</Button>\n\t\t)\n\t}\n)\nDataButton.displayName = \"DataButton\"\n\nexport { DataButton }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}