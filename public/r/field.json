{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "https://ui.fldr.zip/r/label.json"
  ],
  "files": [
    {
      "path": "src/components/ui/field.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n\tController,\n\tControllerProps,\n\tFieldPath,\n\tFieldValues,\n\tuseFormContext,\n} from \"react-hook-form\"\n\nimport { Label } from \"@/components/ui/label\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype FieldContextType = {\n\tname: string\n\tid: string\n\terror: string | undefined\n}\n\nconst FieldContext = React.createContext<FieldContextType | null>(null)\n\nconst Field = <\n\tTFieldValues extends FieldValues = FieldValues,\n\tTName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n\t...props\n}: ControllerProps<TFieldValues, TName>) => {\n\tconst id = React.useId()\n\n\treturn (\n\t\t<FieldContext.Provider value={{ name: props.name, id, error: \"\" }}>\n\t\t\t<Controller {...props} />\n\t\t</FieldContext.Provider>\n\t)\n}\n\nconst useField = () => {\n\tconst context = React.useContext(FieldContext)\n\n\tif (!context) {\n\t\tthrow new Error(\"useField must be used within a Field\")\n\t}\n\n\tconst { getFieldState, formState } = useFormContext()\n\tconst fieldState = getFieldState(context.name, formState)\n\n\tconst { id, name } = context\n\n\treturn {\n\t\tid,\n\t\tname,\n\t\terror: fieldState.error?.message,\n\t\tdescriptionId: `${id}-description`,\n\t\terrorId: `${id}-error`,\n\t}\n}\n\nconst FieldContent = ({\n\tclassName,\n\t...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n\t<div className={cn(\"flex flex-col gap-2\", className)} {...props} />\n)\n\nconst FieldLabel = ({\n\tclassName,\n\t...props\n}: React.LabelHTMLAttributes<HTMLLabelElement>) => {\n\tconst { id, error } = useField()\n\n\treturn (\n\t\t<Label\n\t\t\thtmlFor={id}\n\t\t\tclassName={cn(error && \"text-destructive\", className)}\n\t\t\t{...props}\n\t\t/>\n\t)\n}\n\nconst FieldControl = ({\n\tchildren,\n\t...props\n}: React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>) => {\n\tconst { id, descriptionId, error, errorId } = useField()\n\n\treturn React.cloneElement(\n\t\tReact.Children.only(children as React.ReactElement),\n\t\t{\n\t\t\tid,\n\t\t\t\"aria-describedby\": error ? errorId : descriptionId,\n\t\t\t\"aria-invalid\": !!error,\n\t\t\t\"aria-errormessage\": error,\n\t\t\t...props,\n\t\t}\n\t)\n}\n\nconst FieldDescription = ({\n\tclassName,\n\t...props\n}: React.HTMLAttributes<HTMLParagraphElement>) => (\n\t<p className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n)\n\nconst FieldError = ({\n\tchildren,\n\tclassName,\n\t...props\n}: React.HTMLAttributes<HTMLParagraphElement>) => {\n\tconst { error } = useField()\n\n\treturn (\n\t\t<p className={cn(\"text-sm text-destructive\", className)} {...props}>\n\t\t\t{error || children}\n\t\t</p>\n\t)\n}\n\nexport {\n\tField,\n\tuseField,\n\tFieldLabel,\n\tFieldDescription,\n\tFieldError,\n\tFieldControl,\n\tFieldContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}