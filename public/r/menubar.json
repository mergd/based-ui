{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "menubar",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/ui/menubar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Menu } from \"@base-ui-components/react/menu\"\nimport { useControlled, useForkRef } from \"@base-ui-components/react/utils\"\nimport { CheckIcon, ChevronRightIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarSubMenu = Menu.Root\nMenubarSubMenu.displayName = \"MenubarSubMenu\"\n\nconst MenubarRadioGroup = Menu.RadioGroup\nMenubarRadioGroup.displayName = \"MenubarRadioGroup\"\n\ntype TriggerRect = {\n\tleft: number\n\twidth: number\n\theight: number\n}\n\ntype MenubarContext = {\n\tactiveMenuId: string | null\n\tsetActiveMenuId: (id: string | null) => void\n\ttriggerRects: Map<string, TriggerRect>\n\tregisterTrigger: (id: string, rect: TriggerRect) => void\n}\n\nconst MenubarContext = React.createContext<MenubarContext | null>(null)\n\nconst useMenubar = () => {\n\tconst context = React.useContext(MenubarContext)\n\n\tif (!context) {\n\t\tthrow new Error(\"useMenubar must be used within a MenubarProvider\")\n\t}\n\n\treturn context\n}\n\nconst Menubar = React.forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n\tconst [activeMenuId, setActiveMenuId] = React.useState<string | null>(null)\n\tconst [triggerRects, setTriggerRects] = React.useState<\n\t\tMap<string, TriggerRect>\n\t>(new Map())\n\n\tconst registerTrigger = React.useCallback((id: string, rect: TriggerRect) => {\n\t\tsetTriggerRects((prev) => new Map(prev).set(id, rect))\n\t}, [])\n\n\treturn (\n\t\t<MenubarContext.Provider\n\t\t\tvalue={{ activeMenuId, setActiveMenuId, triggerRects, registerTrigger }}\n\t\t>\n\t\t\t<div\n\t\t\t\tref={ref}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"relative flex w-fit gap-0.5 rounded-md border bg-card p-1 shadow-sm\",\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t\t<MenubarIndicator />\n\t\t\t</div>\n\t\t</MenubarContext.Provider>\n\t)\n})\nMenubar.displayName = \"Menubar\"\n\ntype MenubarMenuContext = {\n\tid: string\n}\n\nconst MenubarMenuContext = React.createContext<MenubarMenuContext | null>(null)\n\nconst useMenubarMenu = () => {\n\tconst context = React.useContext(MenubarMenuContext)\n\n\tif (!context) {\n\t\tthrow new Error(\"useMenubarMenu must be used within a MenubarMenuProvider\")\n\t}\n\n\treturn context\n}\n\nconst MenubarMenu = ({\n\tchildren,\n\t...props\n}: React.ComponentPropsWithoutRef<typeof Menu.Root>) => {\n\tconst id = React.useId()\n\n\tconst { activeMenuId, setActiveMenuId } = useMenubar()\n\tconst [open, setOpen] = useControlled({\n\t\tcontrolled: props.open,\n\t\tdefault: false,\n\t\tname: \"MenubarMenu\",\n\t\tstate: \"open\",\n\t})\n\n\tconst handleOpenChange = (open: boolean) => {\n\t\tsetOpen(open)\n\t\tif (open) {\n\t\t\tsetActiveMenuId(id)\n\t\t} else if (activeMenuId === id) {\n\t\t\tsetActiveMenuId(null)\n\t\t}\n\t}\n\n\tReact.useEffect(() => {\n\t\tif (activeMenuId !== id) {\n\t\t\tsetOpen(false)\n\t\t}\n\t}, [activeMenuId])\n\n\treturn (\n\t\t<MenubarMenuContext.Provider value={{ id }}>\n\t\t\t<Menu.Root\n\t\t\t\topen={open}\n\t\t\t\tmodal={false}\n\t\t\t\topenOnHover={activeMenuId ? activeMenuId !== id : false}\n\t\t\t\tdelay={0}\n\t\t\t\tonOpenChange={handleOpenChange}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Menu.Root>\n\t\t</MenubarMenuContext.Provider>\n\t)\n}\nMenubarMenu.displayName = \"MenubarMenu\"\n\nconst MenubarTrigger = React.forwardRef<\n\tHTMLButtonElement,\n\tReact.ComponentPropsWithoutRef<typeof Menu.Trigger>\n>(({ className, ...props }, ref) => {\n\tconst { id } = useMenubarMenu()\n\tconst { registerTrigger } = useMenubar()\n\n\tconst triggerRef = React.useRef<HTMLButtonElement>(null)\n\n\tReact.useEffect(() => {\n\t\tconst updateRect = () => {\n\t\t\tconst element = triggerRef.current\n\t\t\tif (element) {\n\t\t\t\tconst rect = element.getBoundingClientRect()\n\t\t\t\tconst parentRect = element.parentElement?.getBoundingClientRect()\n\t\t\t\tif (parentRect) {\n\t\t\t\t\tregisterTrigger(id, {\n\t\t\t\t\t\tleft: rect.left - parentRect.left - 0.5,\n\t\t\t\t\t\twidth: rect.width,\n\t\t\t\t\t\theight: rect.height,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdateRect()\n\t\twindow.addEventListener(\"resize\", updateRect)\n\n\t\treturn () => window.removeEventListener(\"resize\", updateRect)\n\t}, [])\n\n\treturn (\n\t\t<Menu.Trigger\n\t\t\tref={useForkRef(ref, triggerRef)}\n\t\t\tclassName={cn(\n\t\t\t\t\"relative z-[1] flex min-h-8 cursor-default select-none items-center gap-1 rounded px-2 py-1 text-sm font-medium outline-none data-[popup-open]:text-foreground\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t)\n})\nMenubarTrigger.displayName = \"MenubarTrigger\"\n\nexport const MenubarIndicatorCssVars = {\n\tactiveMenuLeft: \"--active-menu-left\",\n\tactiveMenuWidth: \"--active-menu-width\",\n\tactiveMenuHeight: \"--active-menu-height\",\n} as const\n\nconst MenubarIndicator = React.forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n\tconst { activeMenuId, triggerRects } = useMenubar()\n\tconst activeRect = activeMenuId ? triggerRects.get(activeMenuId) : null\n\tconst prevRectRef = React.useRef(activeRect)\n\n\tReact.useEffect(() => {\n\t\tif (activeRect) {\n\t\t\tprevRectRef.current = activeRect\n\t\t}\n\t}, [activeRect])\n\n\tconst targetRect = activeRect || prevRectRef.current\n\tconst displayIndicator = Boolean(activeRect)\n\n\tconst style = React.useMemo(() => {\n\t\tif (!targetRect) {\n\t\t\treturn undefined\n\t\t}\n\n\t\treturn {\n\t\t\t[MenubarIndicatorCssVars.activeMenuLeft]: `${targetRect.left}px`,\n\t\t\t[MenubarIndicatorCssVars.activeMenuWidth]: `${targetRect.width}px`,\n\t\t\t[MenubarIndicatorCssVars.activeMenuHeight]: `${targetRect.height}px`,\n\t\t} as React.CSSProperties\n\t}, [targetRect])\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\tclassName={cn(\n\t\t\t\t\"absolute left-[var(--active-menu-left)] top-1/2 h-[calc(var(--active-menu-height)-0.25rem)] w-[var(--active-menu-width)] -translate-y-1/2 rounded-xs bg-accent transition-all duration-150 ease-out\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tstyle={style}\n\t\t\trole=\"presentation\"\n\t\t\thidden={!displayIndicator}\n\t\t\t{...props}\n\t\t/>\n\t)\n})\nMenubarIndicator.displayName = \"MenubarIndicator\"\n\ninterface MenubarContentProps\n\textends React.ComponentPropsWithoutRef<typeof Menu.Popup> {\n\talign?: Menu.Positioner.Props[\"align\"]\n\tsideOffset?: Menu.Positioner.Props[\"sideOffset\"]\n\talignOffset?: Menu.Positioner.Props[\"alignOffset\"]\n}\n\nconst MenubarContent = React.forwardRef<HTMLDivElement, MenubarContentProps>(\n\t(\n\t\t{ className, align = \"start\", sideOffset = 4, alignOffset = -4, ...props },\n\t\tref\n\t) => (\n\t\t<Menu.Portal>\n\t\t\t<Menu.Positioner\n\t\t\t\tsideOffset={sideOffset}\n\t\t\t\talignOffset={alignOffset}\n\t\t\t\talign={align}\n\t\t\t>\n\t\t\t\t<Menu.Popup\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"min-w-40 origin-[var(--transform-origin)] rounded-sm border bg-popover p-0.5 text-popover-foreground shadow-sm outline-none transition-[transform,scale,opacity] data-[ending-style]:scale-95 data-[starting-style]:scale-95 data-[ending-style]:opacity-0 data-[starting-style]:opacity-0 data-[starting-style]:translate-y-1 dark:shadow-none\",\n\t\t\t\t\t\tclassName\n\t\t\t\t\t)}\n\t\t\t\t\t{...props}\n\t\t\t\t/>\n\t\t\t</Menu.Positioner>\n\t\t</Menu.Portal>\n\t)\n)\nMenubarContent.displayName = \"MenubarContent\"\n\nconst MenubarItem = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof Menu.Item>\n>(({ className, ...props }, ref) => (\n\t<Menu.Item\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t\"flex select-none items-center gap-1.5 rounded px-1.5 py-1 text-sm outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n\t\t\tclassName\n\t\t)}\n\t\t{...props}\n\t/>\n))\nMenubarItem.displayName = \"MenubarItem\"\n\nconst MenubarItemShortcut = React.forwardRef<\n\tHTMLSpanElement,\n\tReact.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n\t<span\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t\"ml-auto pl-8 text-xs tracking-widest text-muted-foreground\",\n\t\t\tclassName\n\t\t)}\n\t\t{...props}\n\t/>\n))\nMenubarItemShortcut.displayName = \"MenubarItemShortcut\"\n\nconst MenubarSeparator = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof Menu.Separator>\n>(({ className, ...props }, ref) => (\n\t<Menu.Separator\n\t\tref={ref}\n\t\tclassName={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n\t\t{...props}\n\t/>\n))\nMenubarSeparator.displayName = \"MenubarSeparator\"\n\nconst MenubarSubTrigger = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof Menu.SubmenuTrigger>\n>(({ className, children, ...props }, ref) => (\n\t<Menu.SubmenuTrigger\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t\"flex select-none items-center gap-1.5 rounded px-1.5 py-1 text-sm outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-accent data-[popup-open]:bg-accent data-[highlighted]:text-accent-foreground data-[popup-open]:text-accent-foreground data-[disabled]:opacity-50\",\n\t\t\tclassName\n\t\t)}\n\t\t{...props}\n\t>\n\t\t{children}\n\t\t<ChevronRightIcon className=\"ml-auto size-3\" />\n\t</Menu.SubmenuTrigger>\n))\nMenubarSubTrigger.displayName = \"MenubarSubTrigger\"\n\nconst MenubarCheckboxItem = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof Menu.CheckboxItem>\n>(({ className, children, ...props }, ref) => (\n\t<Menu.CheckboxItem\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t\"flex select-none items-center gap-1.5 rounded px-1.5 py-1 text-sm outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground data-[disabled]:opacity-50\",\n\t\t\tclassName\n\t\t)}\n\t\t{...props}\n\t>\n\t\t<div className=\"size-4\">\n\t\t\t<Menu.CheckboxItemIndicator>\n\t\t\t\t<CheckIcon className=\"size-full\" />\n\t\t\t</Menu.CheckboxItemIndicator>\n\t\t</div>\n\t\t<span>{children}</span>\n\t</Menu.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = \"MenubarCheckboxItem\"\n\nconst MenubarRadioItem = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof Menu.RadioItem>\n>(({ className, children, ...props }, ref) => (\n\t<Menu.RadioItem\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t\"flex select-none items-center gap-1.5 rounded px-1.5 py-1 text-sm outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground data-[disabled]:opacity-50\",\n\t\t\tclassName\n\t\t)}\n\t\t{...props}\n\t>\n\t\t<div className=\"size-4\">\n\t\t\t<Menu.RadioItemIndicator>\n\t\t\t\t<CheckIcon className=\"size-full\" />\n\t\t\t</Menu.RadioItemIndicator>\n\t\t</div>\n\t\t<span>{children}</span>\n\t</Menu.RadioItem>\n))\nMenubarRadioItem.displayName = \"MenubarRadioItem\"\n\nexport {\n\tMenubar,\n\tMenubarMenu,\n\tMenubarTrigger,\n\tMenubarContent,\n\tMenubarItem,\n\tMenubarSeparator,\n\tMenubarSubTrigger,\n\tMenubarSubMenu,\n\tMenubarCheckboxItem,\n\tMenubarRadioGroup,\n\tMenubarRadioItem,\n\tMenubarItemShortcut,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}