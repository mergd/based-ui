{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/ui/button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { mergeProps } from \"@base-ui-components/react\"\nimport { useRender } from \"@base-ui-components/react/use-render\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n\t\"cursor-pointer inline-flex items-center justify-center whitespace-nowrap rounded-md font-medium transition-colors duration-200 outline-none select-none focus-visible:outline focus-visible:outline-2 focus-visible:-outline-offset-1 focus-visible:outline-blue-800 disabled:pointer-events-none disabled:opacity-70 [&_svg]:shrink-0\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: \"bg-primary text-primary-foreground hover:bg-primary/80\",\n\t\t\t\tsecondary:\n\t\t\t\t\t\"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n\t\t\t\tghost: \"text-foreground hover:bg-accent hover:text-accent-foreground\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border bg-transparent text-foreground hover:bg-accent hover:text-accent-foreground\",\n\t\t\t\tlink: \"text-foreground hover:underline\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n\t\t\t\tsuccess: \"bg-success text-success-foreground hover:bg-success/80\",\n\t\t\t\tretro:\n\t\t\t\t\t\"relative isolate inline-flex items-center justify-center overflow-hidden rounded-md font-medium transition-all duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] \\\n\t\t\t\t\tshadow-[0_1px_theme(colors.white/0.07)_inset,0_1px_3px_theme(colors.black/0.2)] dark:shadow-[0_1px_theme(colors.white/0.05)_inset,0_1px_3px_theme(colors.black/0.4)] \\\n\t\t\t\t\tbefore:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:from-white/20 dark:before:from-white/10 before:opacity-50 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] \\\n\t\t\t\t\tafter:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:from-white/10 dark:after:from-white/5 after:from-[46%] after:to-[54%] after:mix-blend-overlay \\\n\t\t\t\t\tbg-neutral-200 text-neutral-900 ring-1 ring-black/5 hover:before:opacity-100 active:brightness-95 active:shadow-[0_1px_theme(colors.black/0.05)_inset] \\\n\t\t\t\t\tdark:bg-neutral-800 dark:text-neutral-100 dark:ring-white/10 dark:active:shadow-[0_1px_theme(colors.black/0.2)_inset]\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tsm: \"h-8 px-2.5 text-sm\",\n\t\t\t\tmd: \"h-9 px-3 text-base\",\n\t\t\t\tlg: \"h-10 px-3.5 text-base\",\n\t\t\t\t\"icon-sm\": \"size-8 text-sm [&>svg]:size-4\",\n\t\t\t\ticon: \"size-9 text-base [&>svg]:size-4\",\n\t\t\t\t\"icon-lg\": \"size-10 text-base [&>svg]:size-5\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"lg\",\n\t\t},\n\t}\n)\n\nexport interface ButtonProps\n\textends VariantProps<typeof buttonVariants>,\n\t\tReact.ButtonHTMLAttributes<HTMLButtonElement>,\n\t\tuseRender.ComponentProps<\"button\"> {}\n\n/**\n * @deprecated Use the `render` prop instead for customizing the underlying element.\n */\nexport interface ButtonProps {\n\tasChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\tvariant,\n\t\t\tsize,\n\t\t\trender = <button />,\n\t\t\tchildren,\n\t\t\tdisabled,\n\t\t\t// @deprecated Use the `render` prop instead for customizing the underlying element\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tasChild,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\tconst defaultProps: useRender.ElementProps<\"button\"> = {\n\t\t\tclassName: cn(buttonVariants({ variant, size, className })),\n\t\t\tref: ref,\n\t\t\tdisabled: disabled,\n\t\t}\n\n\t\tconst renderResult = useRender({\n\t\t\trender,\n\t\t\tprops: mergeProps<\"button\">(defaultProps, props, { children }),\n\t\t})\n\n\t\treturn renderResult\n\t}\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}